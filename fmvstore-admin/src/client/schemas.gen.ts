// This file is auto-generated by @hey-api/openapi-ts

export const $RegisterDto = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
    },
    email: {
      type: 'string',
    },
    password: {
      type: 'string',
    },
    phoneNumber: {
      type: 'string',
    },
  },
  required: ['name', 'email', 'password', 'phoneNumber'],
} as const

export const $LoginDto = {
  type: 'object',
  properties: {
    email: {
      type: 'string',
      description: "User's email",
      example: 'super',
    },
    password: {
      type: 'string',
      description: "User's password",
      example: 'password',
    },
  },
  required: ['email', 'password'],
} as const

export const $UserEntity = {
  type: 'object',
  properties: {
    id: {
      type: 'number',
    },
    email: {
      type: 'string',
    },
    password: {
      type: 'string',
    },
    phoneNumber: {
      type: 'string',
    },
    name: {
      type: 'string',
    },
    avatar: {
      type: 'string',
    },
    gender: {
      type: 'string',
      enum: ['MALE', 'FEMALE', 'OTHER'],
    },
    dob: {
      format: 'date-time',
      type: 'string',
    },
    role: {
      type: 'string',
      enum: ['ADMIN', 'SUB_ADMIN', 'USER'],
    },
  },
  required: [
    'id',
    'email',
    'password',
    'phoneNumber',
    'name',
    'avatar',
    'gender',
    'dob',
    'role',
  ],
} as const

export const $LoginEntity = {
  type: 'object',
  properties: {
    user: {
      description: 'User Profile',
      allOf: [
        {
          $ref: '#/components/schemas/UserEntity',
        },
      ],
    },
    accessToken: {
      type: 'string',
      description: 'Access Token',
      example:
        'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiQU5BTFlTVCIsInVzZXJJZCI6MiwiaWF0IjoxNjUzNDczMjc2LCJleHAiOjE2NTM0NzMzMzZ9.0UmwzeISGncWzL1DzzrltQSpN9QgeU0blu_3-QxsJHs',
    },
    refreshToken: {
      type: 'string',
      description: 'Refresh Token',
      example: 'd50a44bc-5249-4406-83b1-afdea1887243',
    },
  },
  required: ['user', 'accessToken', 'refreshToken'],
} as const

export const $RefreshTokenDto = {
  type: 'object',
  properties: {
    token: {
      type: 'string',
      description: 'Refresh Token',
      example: 'd50a44bc-5249-4406-83b1-afdea1887243',
    },
  },
  required: ['token'],
} as const

export const $LogoutDto = {
  type: 'object',
  properties: {
    refreshToken: {
      type: 'string',
      description: "User's refreshToken",
      example: 'EUxH-Dj_O2VMMIpmMr6Xy',
    },
    isRevokedAllSession: {
      type: 'boolean',
      description: 'is remove all session?',
      example: 'true',
    },
  },
  required: ['refreshToken'],
} as const

export const $UpdatePasswordDto = {
  type: 'object',
  properties: {
    oldPassword: {
      type: 'string',
    },
    newPassword: {
      type: 'string',
    },
  },
  required: ['oldPassword', 'newPassword'],
} as const

export const $UpdateUserDto = {
  type: 'object',
  properties: {
    gender: {
      type: 'string',
      description: "User's dob",
      example: 'super',
      enum: ['MALE', 'FEMALE', 'OTHER'],
    },
    name: {
      type: 'string',
      description: "User's name",
      example: 'super',
    },
    avatar: {
      type: 'string',
      description: "User's phone number",
      example: 'super',
    },
    dob: {
      format: 'date-time',
      type: 'string',
      description: "User's dob",
      example: 'super',
    },
    phoneNumber: {
      type: 'string',
      description: "User's phone number",
      example: 'super',
    },
  },
  required: ['gender', 'name', 'avatar', 'dob', 'phoneNumber'],
} as const

export const $StaffIndexEntity = {
  type: 'object',
  properties: {
    id: {
      type: 'number',
    },
    email: {
      type: 'string',
    },
    phoneNumber: {
      type: 'string',
    },
    name: {
      type: 'string',
    },
    gender: {
      type: 'string',
      enum: ['MALE', 'FEMALE', 'OTHER'],
    },
    dob: {
      format: 'date-time',
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
  },
  required: [
    'id',
    'email',
    'phoneNumber',
    'name',
    'gender',
    'dob',
    'createdAt',
  ],
} as const

export const $StaffListEntity = {
  type: 'object',
  properties: {
    total: {
      type: 'number',
    },
    items: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/StaffIndexEntity',
      },
    },
  },
  required: ['total', 'items'],
} as const

export const $CreateStaffDto = {
  type: 'object',
  properties: {
    email: {
      type: 'string',
    },
    name: {
      type: 'string',
    },
    password: {
      type: 'string',
    },
    phoneNumber: {
      type: 'string',
    },
    gender: {
      type: 'string',
      enum: ['MALE', 'FEMALE', 'OTHER'],
    },
    dob: {
      type: 'string',
    },
  },
  required: ['email', 'name', 'password', 'phoneNumber', 'gender', 'dob'],
} as const

export const $UpdateStaffDto = {
  type: 'object',
  properties: {
    email: {
      type: 'string',
    },
    name: {
      type: 'string',
    },
    phoneNumber: {
      type: 'string',
    },
    gender: {
      type: 'string',
      enum: ['MALE', 'FEMALE', 'OTHER'],
    },
    dob: {
      type: 'string',
    },
  },
  required: ['email', 'name', 'phoneNumber', 'gender', 'dob'],
} as const

export const $AddressIndexEntity = {
  type: 'object',
  properties: {
    id: {
      type: 'number',
    },
    name: {
      type: 'string',
    },
    phone: {
      type: 'string',
    },
    isDefault: {
      type: 'boolean',
    },
    address: {
      type: 'string',
    },
    detailAddress: {
      type: 'string',
    },
    addressType: {
      type: 'string',
      enum: ['HOME', 'OFFICE'],
    },
  },
  required: [
    'id',
    'name',
    'phone',
    'isDefault',
    'address',
    'detailAddress',
    'addressType',
  ],
} as const

export const $AddressListEntity = {
  type: 'object',
  properties: {
    total: {
      type: 'number',
    },
    items: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/AddressIndexEntity',
      },
    },
  },
  required: ['total', 'items'],
} as const

export const $AddressDetailEntity = {
  type: 'object',
  properties: {
    id: {
      type: 'number',
    },
    name: {
      type: 'string',
    },
    phone: {
      type: 'string',
    },
    isDefault: {
      type: 'boolean',
    },
    address: {
      type: 'string',
    },
    detailAddress: {
      type: 'string',
    },
    addressType: {
      type: 'string',
      enum: ['HOME', 'OFFICE'],
    },
  },
  required: [
    'id',
    'name',
    'phone',
    'isDefault',
    'address',
    'detailAddress',
    'addressType',
  ],
} as const

export const $UpdateAddressDto = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
    },
    phone: {
      type: 'string',
    },
    address: {
      type: 'string',
    },
    detailAddress: {
      type: 'string',
    },
    isDefault: {
      type: 'boolean',
    },
    addressType: {
      type: 'object',
    },
  },
  required: [
    'name',
    'phone',
    'address',
    'detailAddress',
    'isDefault',
    'addressType',
  ],
} as const

export const $CategoryIndexEntity = {
  type: 'object',
  properties: {
    id: {
      type: 'number',
    },
    name: {
      type: 'string',
    },
    parentId: {
      type: 'number',
    },
    children: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/CategoryIndexEntity',
      },
    },
  },
  required: ['id', 'name', 'parentId'],
} as const

export const $CategoryListEntity = {
  type: 'object',
  properties: {
    total: {
      type: 'number',
    },
    items: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/CategoryIndexEntity',
      },
    },
  },
  required: ['total', 'items'],
} as const

export const $SubCategoryIndexEntity = {
  type: 'object',
  properties: {
    id: {
      type: 'number',
    },
    name: {
      type: 'string',
    },
    category: {
      type: 'string',
    },
  },
  required: ['id', 'name'],
} as const

export const $SubCategoryListEntity = {
  type: 'object',
  properties: {
    total: {
      type: 'number',
    },
    items: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/SubCategoryIndexEntity',
      },
    },
  },
  required: ['total', 'items'],
} as const

export const $CreateCategoryDto = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
    },
    parentId: {
      type: 'number',
    },
  },
  required: ['name'],
} as const

export const $ProductItemsConfiguration = {
  type: 'object',
  properties: {
    productItemId: {
      type: 'number',
    },
    size: {
      type: 'string',
    },
    color: {
      type: 'string',
    },
    image: {
      type: 'string',
    },
  },
  required: ['productItemId', 'size', 'color', 'image'],
} as const

export const $ProductVariation = {
  type: 'object',
  properties: {
    id: {
      type: 'number',
    },
    value: {
      type: 'string',
    },
    image: {
      type: 'string',
    },
  },
  required: ['id', 'value'],
} as const

export const $ProductIndexEntity = {
  type: 'object',
  properties: {
    id: {
      type: 'number',
    },
    name: {
      type: 'string',
    },
    overview: {
      type: 'string',
    },
    slug: {
      type: 'string',
    },
    discount: {
      type: 'number',
    },
    discountType: {
      type: 'string',
      enum: ['PERCENTAGE', 'AMOUNT'],
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    price: {
      type: 'number',
    },
    productImages: {
      type: 'string',
    },
    productItemsConfiguration: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ProductItemsConfiguration',
      },
    },
    sizes: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ProductVariation',
      },
    },
    colors: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ProductVariation',
      },
    },
  },
  required: [
    'id',
    'name',
    'overview',
    'slug',
    'discount',
    'discountType',
    'createdAt',
    'price',
    'productImages',
    'productItemsConfiguration',
  ],
} as const

export const $ProductListEntity = {
  type: 'object',
  properties: {
    total: {
      type: 'number',
    },
    items: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ProductIndexEntity',
      },
    },
  },
  required: ['total', 'items'],
} as const

export const $ProductImage = {
  type: 'object',
  properties: {
    image: {
      type: 'string',
    },
    isDefault: {
      type: 'boolean',
    },
  },
  required: ['image', 'isDefault'],
} as const

export const $ProductImageEntity = {
  type: 'object',
  properties: {
    productItemId: {
      type: 'number',
    },
    data: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ProductImage',
      },
    },
  },
  required: ['productItemId', 'data'],
} as const

export const $ProductDetailEntity = {
  type: 'object',
  properties: {
    id: {
      type: 'number',
    },
    name: {
      type: 'string',
    },
    overview: {
      type: 'string',
    },
    description: {
      type: 'string',
    },
    detail: {
      type: 'string',
    },
    discount: {
      type: 'number',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    price: {
      type: 'number',
    },
    productImages: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ProductImageEntity',
      },
    },
    productItemsConfiguration: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ProductItemsConfiguration',
      },
    },
    sizes: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ProductVariation',
      },
    },
    colors: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ProductVariation',
      },
    },
    rating: {
      type: 'string',
    },
    numberOfReviews: {
      type: 'number',
    },
  },
  required: [
    'id',
    'name',
    'overview',
    'description',
    'detail',
    'discount',
    'createdAt',
    'price',
    'productImages',
    'productItemsConfiguration',
    'rating',
    'numberOfReviews',
  ],
} as const

export const $ProductConfigurationImagesDto = {
  type: 'object',
  properties: {
    image: {
      type: 'string',
    },
    isDefault: {
      type: 'boolean',
    },
  },
  required: ['image', 'isDefault'],
} as const

export const $ProductConfigurationDto = {
  type: 'object',
  properties: {
    colorId: {
      type: 'number',
    },
    sizeId: {
      type: 'number',
    },
    quantity: {
      type: 'number',
    },
    price: {
      type: 'number',
    },
    isDefault: {
      type: 'boolean',
    },
    images: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ProductConfigurationImagesDto',
      },
    },
  },
  required: ['colorId', 'sizeId', 'quantity', 'price', 'isDefault', 'images'],
} as const

export const $createProductAdminDto = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
    },
    category: {
      type: 'string',
    },
    overview: {
      type: 'string',
    },
    description: {
      type: 'string',
    },
    detail: {
      type: 'string',
    },
    discount: {
      type: 'number',
    },
    discountType: {
      type: 'string',
      enum: ['PERCENTAGE', 'AMOUNT'],
    },
    productConfigurationData: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ProductConfigurationDto',
      },
    },
  },
  required: [
    'name',
    'category',
    'overview',
    'description',
    'detail',
    'productConfigurationData',
  ],
} as const

export const $ProductItemImageAdminEntity = {
  type: 'object',
  properties: {
    image: {
      type: 'string',
    },
    isDefault: {
      type: 'boolean',
    },
  },
  required: ['image', 'isDefault'],
} as const

export const $ProductItemIndexAdminEntity = {
  type: 'object',
  properties: {
    id: {
      type: 'number',
    },
    quantity: {
      type: 'number',
    },
    price: {
      type: 'number',
    },
    isDefault: {
      type: 'boolean',
    },
    isAvailable: {
      type: 'boolean',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    updatedAt: {
      format: 'date-time',
      type: 'string',
    },
    name: {
      type: 'string',
    },
    discount: {
      type: 'number',
    },
    category: {
      type: 'string',
    },
    images: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ProductItemImageAdminEntity',
      },
    },
    color: {
      type: 'string',
    },
    size: {
      type: 'string',
    },
  },
  required: [
    'id',
    'quantity',
    'price',
    'isDefault',
    'isAvailable',
    'createdAt',
    'updatedAt',
    'name',
    'discount',
    'category',
    'images',
    'color',
    'size',
  ],
} as const

export const $ProductIndexAdminEntity = {
  type: 'object',
  properties: {
    id: {
      type: 'number',
    },
    name: {
      type: 'string',
    },
    discount: {
      type: 'number',
    },
    discountType: {
      type: 'string',
      enum: ['PERCENTAGE', 'AMOUNT'],
    },
    category: {
      type: 'string',
    },
    defaultImage: {
      type: 'string',
    },
    items: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ProductItemIndexAdminEntity',
      },
    },
  },
  required: [
    'id',
    'name',
    'discount',
    'discountType',
    'category',
    'defaultImage',
    'items',
  ],
} as const

export const $ProductListAdminEntity = {
  type: 'object',
  properties: {
    total: {
      type: 'number',
    },
    items: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ProductIndexAdminEntity',
      },
    },
  },
  required: ['total', 'items'],
} as const

export const $ProductConfigurationAdminEntity = {
  type: 'object',
  properties: {
    productItemId: {
      type: 'number',
    },
    price: {
      type: 'number',
    },
    quantity: {
      type: 'number',
    },
    images: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ProductImage',
      },
    },
    isDefault: {
      type: 'boolean',
    },
    isAvailable: {
      type: 'boolean',
    },
    color: {
      type: 'object',
      properties: {
        id: {
          required: true,
          type: 'number',
        },
        value: {
          required: true,
          type: 'string',
        },
        image: {
          required: true,
          type: 'string',
        },
      },
    },
    size: {
      type: 'object',
      properties: {
        id: {
          required: true,
          type: 'number',
        },
        image: {
          required: true,
          type: 'string',
        },
        value: {
          required: true,
          type: 'string',
        },
      },
    },
  },
  required: [
    'productItemId',
    'price',
    'quantity',
    'images',
    'isDefault',
    'isAvailable',
    'color',
    'size',
  ],
} as const

export const $ProductDetailAdminEntity = {
  type: 'object',
  properties: {
    id: {
      type: 'number',
    },
    name: {
      type: 'string',
    },
    overview: {
      type: 'string',
    },
    description: {
      type: 'string',
    },
    detail: {
      type: 'string',
    },
    discount: {
      type: 'number',
    },
    discountType: {
      type: 'string',
      enum: ['PERCENTAGE', 'AMOUNT'],
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    category: {
      $ref: '#/components/schemas/CategoryIndexEntity',
    },
    subCategory: {
      $ref: '#/components/schemas/CategoryIndexEntity',
    },
    items: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ProductConfigurationAdminEntity',
      },
    },
  },
  required: [
    'id',
    'name',
    'overview',
    'description',
    'detail',
    'discount',
    'discountType',
    'createdAt',
    'category',
    'subCategory',
    'items',
  ],
} as const

export const $UpdateProductConfigurationImagesDto = {
  type: 'object',
  properties: {
    image: {
      type: 'string',
    },
    isDefault: {
      type: 'boolean',
    },
  },
  required: ['image', 'isDefault'],
} as const

export const $UpdateProductConfigurationDto = {
  type: 'object',
  properties: {
    productItemId: {
      type: 'number',
    },
    colorId: {
      type: 'number',
    },
    sizeId: {
      type: 'number',
    },
    quantity: {
      type: 'number',
    },
    price: {
      type: 'number',
    },
    isDefault: {
      type: 'boolean',
    },
    isAvailable: {
      type: 'boolean',
    },
    images: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/UpdateProductConfigurationImagesDto',
      },
    },
  },
  required: [
    'productItemId',
    'colorId',
    'sizeId',
    'quantity',
    'price',
    'isDefault',
    'images',
  ],
} as const

export const $updateProductAdminDto = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
    },
    overview: {
      type: 'string',
    },
    description: {
      type: 'string',
    },
    detail: {
      type: 'string',
    },
    discount: {
      type: 'number',
    },
    discountType: {
      type: 'string',
      enum: ['PERCENTAGE', 'AMOUNT'],
    },
    category: {
      type: 'string',
    },
    productConfigurationData: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/UpdateProductConfigurationDto',
      },
    },
  },
  required: [
    'name',
    'overview',
    'description',
    'detail',
    'discount',
    'discountType',
    'category',
    'productConfigurationData',
  ],
} as const

export const $SearchImageProductDto = {
  type: 'object',
  properties: {
    file: {
      type: 'string',
    },
  },
  required: ['file'],
} as const

export const $UploadDto = {
  type: 'object',
  properties: {
    key: {
      type: 'string',
    },
  },
  required: ['key'],
} as const

export const $CreateOrderDto = {
  type: 'object',
  properties: {
    paymentMethod: {
      type: 'string',
      description: "User's email",
      example: 'super',
      enum: ['CASH', 'CARD', 'STRIPE'],
    },
    shippingAddressId: {
      type: 'number',
      description: "User's email",
      example: 'super',
    },
  },
  required: ['paymentMethod', 'shippingAddressId'],
} as const

export const $OrderLineIndexEntity = {
  type: 'object',
  properties: {
    id: {
      type: 'number',
    },
    quantity: {
      type: 'number',
    },
    price: {
      type: 'number',
    },
    productItemId: {
      type: 'number',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    updatedAt: {
      format: 'date-time',
      type: 'string',
    },
    name: {
      type: 'string',
    },
    image: {
      type: 'string',
    },
    size: {
      type: 'string',
    },
    color: {
      type: 'string',
    },
  },
  required: [
    'id',
    'quantity',
    'price',
    'productItemId',
    'createdAt',
    'updatedAt',
    'name',
    'image',
    'size',
    'color',
  ],
} as const

export const $OrderIndexEntity = {
  type: 'object',
  properties: {
    id: {
      type: 'number',
    },
    orderCode: {
      type: 'string',
    },
    orderDate: {
      format: 'date-time',
      type: 'string',
    },
    orderTotal: {
      type: 'number',
    },
    orderStatus: {
      type: 'string',
      enum: ['PENDING', 'PROCESSING', 'SHIPPED', 'DELIVERED', 'CANCELLED'],
    },
    paymentMethod: {
      type: 'string',
      enum: ['CASH', 'CARD', 'STRIPE'],
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    updatedAt: {
      format: 'date-time',
      type: 'string',
    },
    user: {
      type: 'string',
    },
    orderLines: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/OrderLineIndexEntity',
      },
    },
    shippingAddress: {
      $ref: '#/components/schemas/AddressIndexEntity',
    },
  },
  required: [
    'id',
    'orderCode',
    'orderDate',
    'orderTotal',
    'orderStatus',
    'paymentMethod',
    'createdAt',
    'updatedAt',
    'user',
    'orderLines',
    'shippingAddress',
  ],
} as const

export const $OrderListEntity = {
  type: 'object',
  properties: {
    total: {
      type: 'number',
    },
    items: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/OrderIndexEntity',
      },
    },
  },
  required: ['total', 'items'],
} as const

export const $UpdateStatusDto = {
  type: 'object',
  properties: {
    orderStatus: {
      type: 'string',
      enum: ['PENDING', 'PROCESSING', 'SHIPPED', 'DELIVERED', 'CANCELLED'],
    },
  },
} as const

export const $VariationOptionIndexEntity = {
  type: 'object',
  properties: {
    id: {
      type: 'number',
    },
    value: {
      type: 'string',
    },
    image: {
      type: 'string',
    },
    variation: {
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
  },
  required: ['id', 'value', 'image'],
} as const

export const $VariationIndexEntity = {
  type: 'object',
  properties: {
    id: {
      type: 'number',
    },
    name: {
      type: 'string',
    },
    options: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/VariationOptionIndexEntity',
      },
    },
  },
  required: ['id', 'name', 'options'],
} as const

export const $VariationListEntity = {
  type: 'object',
  properties: {
    total: {
      type: 'number',
    },
    items: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/VariationIndexEntity',
      },
    },
  },
  required: ['total', 'items'],
} as const

export const $VariationOptionListEntity = {
  type: 'object',
  properties: {
    total: {
      type: 'number',
    },
    items: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/VariationOptionIndexEntity',
      },
    },
  },
  required: ['total', 'items'],
} as const

export const $VariationOptionIndexAdminEntity = {
  type: 'object',
  properties: {
    id: {
      type: 'number',
    },
    value: {
      type: 'string',
    },
    image: {
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
  },
  required: ['id', 'value', 'image', 'createdAt'],
} as const

export const $VariationOptionListAdminEntity = {
  type: 'object',
  properties: {
    total: {
      type: 'number',
    },
    items: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/VariationOptionIndexAdminEntity',
      },
    },
  },
  required: ['total', 'items'],
} as const

export const $CreateVariationDto = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
    },
    image: {
      type: 'string',
    },
  },
  required: ['name'],
} as const

export const $UpdateVariationDto = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
    },
    image: {
      type: 'string',
    },
  },
  required: ['name'],
} as const

export const $CartItemIndexEntity = {
  type: 'object',
  properties: {
    id: {
      type: 'number',
    },
    quantity: {
      type: 'number',
    },
    slug: {
      type: 'string',
    },
    image: {
      type: 'string',
    },
    name: {
      type: 'string',
    },
    price: {
      type: 'number',
    },
    size: {
      type: 'string',
    },
    color: {
      type: 'string',
    },
    isAvailable: {
      type: 'boolean',
    },
  },
  required: [
    'id',
    'quantity',
    'slug',
    'image',
    'name',
    'price',
    'size',
    'color',
    'isAvailable',
  ],
} as const

export const $CartItemListEntity = {
  type: 'object',
  properties: {
    total: {
      type: 'number',
    },
    items: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/CartItemIndexEntity',
      },
    },
  },
  required: ['total', 'items'],
} as const

export const $AddItemToCartDto = {
  type: 'object',
  properties: {
    productItemId: {
      type: 'number',
      description: 'product item id',
    },
    quantity: {
      type: 'number',
      description: 'quantity',
    },
  },
  required: ['productItemId', 'quantity'],
} as const

export const $UpdateItemToCartDto = {
  type: 'object',
  properties: {
    cartItemId: {
      type: 'number',
      description: 'product item id',
    },
    quantity: {
      type: 'number',
      description: 'quantity',
    },
  },
  required: ['cartItemId', 'quantity'],
} as const

export const $ApplyPromotionDto = {
  type: 'object',
  properties: {
    code: {
      type: 'string',
      description: 'promotion name',
    },
  },
  required: ['code'],
} as const

export const $PromotionIndexEntity = {
  type: 'object',
  properties: {
    id: {
      type: 'number',
    },
    name: {
      type: 'string',
    },
    code: {
      type: 'string',
    },
    description: {
      type: 'string',
    },
    discount: {
      type: 'number',
    },
    discountType: {
      type: 'string',
      enum: ['PERCENTAGE', 'AMOUNT'],
    },
    startDate: {
      format: 'date-time',
      type: 'string',
    },
    endDate: {
      format: 'date-time',
      type: 'string',
    },
  },
  required: [
    'id',
    'name',
    'code',
    'description',
    'discount',
    'discountType',
    'startDate',
    'endDate',
  ],
} as const

export const $CreatePromotionDto = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
      description: 'promotion name',
    },
    code: {
      type: 'string',
    },
    description: {
      type: 'string',
    },
    discount: {
      type: 'number',
    },
    discountType: {
      type: 'string',
      enum: ['PERCENTAGE', 'AMOUNT'],
    },
    startDate: {
      format: 'date-time',
      type: 'string',
    },
    endDate: {
      format: 'date-time',
      type: 'string',
    },
  },
  required: [
    'name',
    'code',
    'description',
    'discount',
    'discountType',
    'startDate',
    'endDate',
  ],
} as const

export const $PromotionListEntity = {
  type: 'object',
  properties: {
    total: {
      type: 'number',
    },
    items: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/PromotionIndexEntity',
      },
    },
  },
  required: ['total', 'items'],
} as const

export const $GeneralAnalyticEntity = {
  type: 'object',
  properties: {
    today: {
      type: 'number',
    },
    yesterday: {
      type: 'number',
    },
    month: {
      type: 'number',
    },
    lastMonth: {
      type: 'number',
    },
    total: {
      type: 'number',
    },
  },
  required: ['today', 'yesterday', 'month', 'lastMonth', 'total'],
} as const

export const $DetailAnalyticEntity = {
  type: 'object',
  properties: {
    orderCount: {
      type: 'array',
      items: {
        type: 'object',
      },
    },
    orderStatistic: {
      type: 'array',
      items: {
        type: 'object',
      },
    },
    productStatistic: {
      type: 'array',
      items: {
        type: 'object',
      },
    },
    productTotal: {
      type: 'number',
    },
  },
} as const

export const $CreateReviewDto = {
  type: 'object',
  properties: {
    rating: {
      type: 'number',
    },
    comment: {
      type: 'string',
    },
  },
  required: ['rating', 'comment'],
} as const

export const $ReviewIndexEntity = {
  type: 'object',
  properties: {
    id: {
      type: 'number',
    },
    rating: {
      type: 'number',
    },
    comment: {
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    userId: {
      type: 'number',
    },
    username: {
      type: 'string',
    },
    avatar: {
      type: 'string',
    },
  },
  required: [
    'id',
    'rating',
    'comment',
    'createdAt',
    'userId',
    'username',
    'avatar',
  ],
} as const

export const $ReviewListEntity = {
  type: 'object',
  properties: {
    total: {
      type: 'number',
    },
    items: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ReviewIndexEntity',
      },
    },
    avarageRating: {
      type: 'number',
    },
  },
  required: ['total', 'items', 'avarageRating'],
} as const
